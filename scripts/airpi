#!/bin/bash

### BEGIN INIT INFO
# Provides:          airpi
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Service to auto-launch airodump-ng.
# Description:       Service to auto-launch airodump-ng. 
#                    Allows wifi dumping to start at boot.
### END INIT INFO

. /lib/lsb/init-functions

# /etc/init.d/airpi: start and stop the airpi daemon

# Source config if available.  Sane defaults otherwise.
[ -e '/etc/airpi.conf' ] && . /etc/airpi.conf

# Process' files
PREFIX=`date +%y%m%d%H%M`
PIDFILE='/var/run/airpi.pid'
DATA=${DATA:-'/opt/airpi/'}

[ -d $DATA ] || mkdir -p $DATA

# Process' binaries
AIRMON=`which airmon-ng`
AIRDMP=`which airodump-ng`


start() {
  log_daemon_msg "Starting airpi daemon" "airpi"
  $AIRMON | grep -iP "^mon[0-9]+"
  [ $? == "0" ] && log_failure_msg "airpi: requires exclusive control of monitor mode" && exit 1

  $AIRMON start $DEVICE 
  [ $? != "0" ] && log_failure_msg "airpi: failed to start monitor mode on $DEVICE" && exit 2

  start-stop-daemon --pidfile $PIDFILE -m \
  -b -d $DATA \
  --start -x $AIRDMP \
    -- -w $PREFIX \
    --berlin ${BERLIN:-60} \
    ${MANF:+-M} \
    ${UPTIME:+-U} \
    --output-format ${FORMAT:-csv} \
    mon0

  log_success_msg "airpi: started successfully"
  exit 0
}

stop() {
  log_daemon_msg "Stopping airpi daemon" "airpi"

  start-stop-daemon --pidfile $PIDFILE \
  --stop -x $AIRDMP \
  --signal 9

  $AIRMON stop mon0
  rm -f $PIDFILE

  log_success_msg "airpi: stopped"
  exit 0
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart|force-reload)
    stop
    start
    ;;
  status)
    status_of_proc -p $PIDFILE "$AIRDMP" airpi
    exit $?
    ;;
  *)
    echo $"Usage: $0 {start|stop|restart|status}"
    exit 1
esac
exit 0

